{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useReducer } from \"react\";\nimport authReducer from \"./authReducer\";\nimport AuthContext from \"./authContext\";\nimport setAuthToken from \"../../utils/setToken\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERROR, CLEAR_ERROR, CLEAR_MESSAGE, LOGOUT, EMAIL_SEND_SUCCESS, EMAIL_SEND_FAILURE, EMAIL_VERIFICATION_SUCCESS, EMAIL_VERIFICATION_FAIL, EMAIL_FOUND, EMAIL_NOT_FOUND, OTP_GENERATED_SUCCESS, OTP_GENERATED_FAILURE, OTP_VALIDATED_SUCCESS, OTP_VALIDATED_FAILURE, PASSWORD_CHANGE_SUCCESS, PASSWORD_CHANGE_FAILURE, EMAIL_VERIFICATION_TIMESTAMP_UPDATED } from \"../Types\";\nconst cookie = new Cookies(); // Will be used in the copyright section in the email footer\n\nvar currentYear = new Date().getFullYear(); // Email sender\n\nconst fromEmail = process.env.NEXT_PUBLIC_FROM_EMAIL;\n\nconst AuthState = props => {\n  const initialState = {\n    token: null,\n    isAuthenticated: null,\n    user: null,\n    loading: true,\n    authError: null,\n    emailVerified: null,\n    verificationStatus: null,\n    emailSent: null,\n    otpGenerated: null,\n    otpValidated: null,\n    passwordChanged: null,\n    genericMessage: null\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(authReducer, initialState); // Register user\n\n  const registerUser = async (name, email, mobile = null, password, apartment) => {\n    const jsonPayload = {\n      name: name,\n      email: email,\n      mobile: mobile,\n      password: password,\n      apartment_id: apartment\n    };\n\n    try {\n      const res = await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/register/user`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.detail\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_ERROR\n      }), 5000);\n    }\n  }; // Load user\n\n\n  const loadUser = async () => {\n    if (cookie.get(\"nddToken\")) {\n      setAuthToken(cookie.get(\"nddToken\"));\n    }\n\n    try {\n      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_PROXY}/auth/current_user`);\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err.message\n      });\n    }\n  }; // User login\n\n\n  const loginUser = async (email, password) => {\n    const formData = new FormData();\n    formData.set(\"username\", email);\n    formData.set(\"password\", password);\n\n    try {\n      const res = await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/auth`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data.detail\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_ERROR\n      }), 5000);\n    }\n  }; // Send email - user registration, welcome etc...\n\n\n  const sendEmail = async (name, email, verificationUrl) => {\n    setAuthToken(process.env.SENDGRID_API_KEY);\n    const jsonPayload = {\n      from_email: fromEmail,\n      to_email: email,\n      template_name: \"VERIFY_EMAIL_TEMPLATE\",\n      name: name,\n      verificationurl: verificationUrl,\n      year: currentYear\n    };\n\n    try {\n      await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/email/send`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: EMAIL_SEND_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: EMAIL_SEND_FAILURE\n      });\n    }\n  }; // Refresh the email verification timestamp\n\n\n  const updateEmailVerificationTimestamp = async id => {\n    const jsonPayload = {\n      id: id\n    };\n\n    try {\n      await axios.put(`${process.env.NEXT_PUBLIC_API_PROXY}/email_timestamp/refresh`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: null\n      });\n    } catch (err) {\n      dispatch({\n        type: EMAIL_VERIFICATION_TIMESTAMP_UPDATED,\n        payload: err.response.data.detail\n      });\n    }\n  }; // Email the otp to the user during password change\n\n\n  const sendOtpByEmail = async email => {\n    setAuthToken(process.env.SENDGRID_API_KEY);\n    const jsonPayload = {\n      from_email: fromEmail,\n      to_email: email,\n      template_name: \"OTP_EMAIL_TEMPLATE\",\n      year: currentYear\n    };\n\n    try {\n      await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/email/send/otp`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: EMAIL_SEND_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: EMAIL_SEND_FAILURE\n      });\n    }\n  }; // Send the contact us email\n\n\n  const sendContactUsEmail = async (email, message) => {\n    setAuthToken(process.env.SENDGRID_API_KEY);\n    var emailBody = `${email} wrote: \\n\\n${message}`;\n    const jsonPayload = {\n      from_email: fromEmail,\n      to_email: fromEmail,\n      body: emailBody\n    };\n\n    try {\n      const res = await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/email/send/contact`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: EMAIL_SEND_SUCCESS,\n        payload: res.data\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_MESSAGE\n      }), 5000);\n    } catch (error) {\n      dispatch({\n        type: EMAIL_SEND_FAILURE,\n        payload: res.data\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_MESSAGE\n      }), 5000);\n    }\n  }; // Complete the user's email verification process\n\n\n  const verifyEmail = async token => {\n    const utcTime = new Date().toJSON();\n\n    try {\n      const res = await axios.put(`${process.env.NEXT_PUBLIC_API_PROXY}/user/emailverification/${token}`, {\n        timestamp: utcTime\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: EMAIL_VERIFICATION_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: EMAIL_VERIFICATION_FAIL,\n        payload: err.response.data.detail\n      });\n    }\n  }; // Method for forgot password - email validation\n\n\n  const validateEmail = async email => {\n    try {\n      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_PROXY}/user/validate_email/${email}`);\n      dispatch({\n        type: EMAIL_FOUND,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: EMAIL_NOT_FOUND,\n        payload: err.response.data.detail\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_ERROR\n      }), 5000);\n    }\n  }; // Method for forgot password - otp generation\n\n\n  const generateOtp = async (id, email) => {\n    const jsonPayload = {\n      id: id,\n      email: email\n    };\n\n    try {\n      await axios.put(`${process.env.NEXT_PUBLIC_API_PROXY}/user/otp_generation`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: OTP_GENERATED_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: OTP_GENERATED_FAILURE,\n        payload: err.response.data.detail\n      });\n    }\n  }; // Method for forgot password - otp generation\n\n\n  const validateOtp = async (id, otp) => {\n    const utcTime = new Date().toJSON();\n\n    try {\n      await axios.get(`${process.env.NEXT_PUBLIC_API_PROXY}/user/verify_otp/${id}?otp=${otp}&timestamp=${utcTime}`);\n      dispatch({\n        type: OTP_VALIDATED_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: OTP_VALIDATED_FAILURE,\n        payload: err.response.data.detail\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_ERROR\n      }), 5000);\n    }\n  }; // Method for forgot password - password update\n\n\n  const updatePassword = async (password, userId) => {\n    const jsonPayload = {\n      password: password\n    };\n\n    try {\n      await axios.put(`${process.env.NEXT_PUBLIC_API_PROXY}/user/password/${userId}`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: PASSWORD_CHANGE_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: PASSWORD_CHANGE_FAILURE,\n        payload: err.response.data.detail\n      });\n    }\n  };\n\n  const logout = () => {\n    dispatch({\n      type: LOGOUT\n    });\n  };\n\n  return __jsx(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      user: state.user,\n      loading: state.loading,\n      authError: state.authError,\n      emailVerified: state.emailVerified,\n      verificationStatus: state.verificationStatus,\n      emailSent: state.emailSent,\n      otpGenerated: state.otpGenerated,\n      otpValidated: state.otpValidated,\n      passwordChanged: state.passwordChanged,\n      genericMessage: state.genericMessage,\n      registerUser,\n      loginUser,\n      loadUser,\n      sendEmail,\n      sendOtpByEmail,\n      verifyEmail,\n      validateEmail,\n      updateEmailVerificationTimestamp,\n      sendContactUsEmail,\n      generateOtp,\n      validateOtp,\n      updatePassword,\n      logout\n    }\n  }, props.children);\n};\n\nexport default AuthState;","map":null,"metadata":{},"sourceType":"module"}
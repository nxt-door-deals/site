{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useReducer } from \"react\";\nimport siteReducer from \"./siteReducer\";\nimport SiteContext from \"./siteContext\";\nimport axios from \"axios\";\nimport { FETCH_APARTMENT, FETCH_APARTMENT_ERROR, LOADING, CLEAR_APARTMENT_SEARCH_RESULTS } from \"../Types\";\n\nconst SiteState = props => {\n  const initialState = {\n    numApartmentsFetched: \"\",\n    fetchError: null,\n    loading: false,\n    apartmentData: \"\"\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(siteReducer, initialState);\n\n  const fetchApartments = async aptName => {\n    try {\n      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_PROXY}/apartments/search/?name=${aptName}`);\n      dispatch({\n        type: FETCH_APARTMENT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: FETCH_APARTMENT_ERROR,\n        payload: err.response.data.detail\n      });\n    }\n  };\n\n  const clearApartmentSearchResults = () => {\n    dispatch({\n      type: CLEAR_APARTMENT_SEARCH_RESULTS\n    });\n  };\n\n  const setLoading = () => {\n    dispatch({\n      type: LOADING\n    });\n  };\n\n  return __jsx(SiteContext.Provider, {\n    value: {\n      numApartmentsFetched: state.numApartmentsFetched,\n      loading: state.loading,\n      apartmentData: state.apartmentData,\n      fetchError: state.fetchError,\n      fetchApartments,\n      clearApartmentSearchResults,\n      setLoading\n    }\n  }, props.children);\n};\n\nexport default SiteState;","map":null,"metadata":{},"sourceType":"module"}
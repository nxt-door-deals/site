{"ast":null,"code":"var _jsxFileName = \"C:\\\\nxt_door_deals\\\\site\\\\client\\\\context\\\\auth\\\\AuthState.jsx\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from \"react\";\nimport authReducer from \"./authReducer\";\nimport AuthContext from \"./authContext\";\nimport setAuthToken from \"../../utils/setToken\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERROR, CLEAR_ERROR, CLEAR_MESSAGE, LOGOUT, EMAIL_SEND_SUCCESS, EMAIL_SEND_FAILURE, EMAIL_VERIFICATION_SUCCESS, EMAIL_VERIFICATION_FAIL, EMAIL_FOUND, EMAIL_NOT_FOUND, OTP_GENERATED_SUCCESS, OTP_GENERATED_FAILURE, OTP_VALIDATED_SUCCESS, OTP_VALIDATED_FAILURE, PASSWORD_CHANGE_SUCCESS, PASSWORD_CHANGE_FAILURE, EMAIL_VERIFICATION_TIMESTAMP_UPDATED } from \"../Types\";\nconst cookie = new Cookies(); // Will be used in the copyright section in the email footer\n\nvar currentYear = new Date().getFullYear(); // Email sender\n\nconst fromEmail = process.env.NEXT_PUBLIC_FROM_EMAIL;\n\nconst AuthState = props => {\n  const initialState = {\n    token: null,\n    isAuthenticated: null,\n    user: null,\n    loading: true,\n    authError: null,\n    emailVerified: null,\n    verificationStatus: null,\n    emailSent: null,\n    otpGenerated: null,\n    otpValidated: null,\n    passwordChanged: null,\n    genericMessage: null\n  };\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(authReducer, initialState); // Register user\n\n  const registerUser = async (name, email, mobile = null, password, apartment) => {\n    const jsonPayload = {\n      name: name,\n      email: email,\n      mobile: mobile,\n      password: password,\n      apartment_id: apartment\n    };\n\n    try {\n      const res = await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/register/user`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.detail\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_ERROR\n      }), 5000);\n    }\n  }; // Load user\n\n\n  const loadUser = async () => {\n    if (cookie.get(\"nddToken\")) {\n      setAuthToken(cookie.get(\"nddToken\"));\n    }\n\n    try {\n      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_PROXY}/auth/current_user`);\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err.message\n      });\n    }\n  }; // User login\n\n\n  const loginUser = async (email, password) => {\n    const formData = new FormData();\n    formData.set(\"username\", email);\n    formData.set(\"password\", password);\n\n    try {\n      const res = await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/auth`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data.detail\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_ERROR\n      }), 5000);\n    }\n  }; // Send email - user registration, welcome etc...\n\n\n  const sendEmail = async (name, email, verificationUrl) => {\n    setAuthToken(process.env.SENDGRID_API_KEY);\n    const jsonPayload = {\n      from_email: fromEmail,\n      to_email: email,\n      template_name: \"VERIFY_EMAIL_TEMPLATE\",\n      name: name,\n      verificationurl: verificationUrl,\n      year: currentYear\n    };\n\n    try {\n      await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/email/send`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: EMAIL_SEND_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: EMAIL_SEND_FAILURE\n      });\n    }\n  }; // Refresh the email verification timestamp\n\n\n  const updateEmailVerificationTimestamp = async id => {\n    const jsonPayload = {\n      id: id\n    };\n\n    try {\n      await axios.put(`${process.env.NEXT_PUBLIC_API_PROXY}/email_timestamp/refresh`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: null\n      });\n    } catch (err) {\n      dispatch({\n        type: EMAIL_VERIFICATION_TIMESTAMP_UPDATED,\n        payload: err.response.data.detail\n      });\n    }\n  }; // Email the otp to the user during password change\n\n\n  const sendOtpByEmail = async email => {\n    setAuthToken(process.env.SENDGRID_API_KEY);\n    const jsonPayload = {\n      from_email: fromEmail,\n      to_email: email,\n      template_name: \"OTP_EMAIL_TEMPLATE\",\n      year: currentYear\n    };\n\n    try {\n      await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/email/send/otp`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: EMAIL_SEND_SUCCESS\n      });\n    } catch (error) {\n      dispatch({\n        type: EMAIL_SEND_FAILURE\n      });\n    }\n  }; // Send the contact us email\n\n\n  const sendContactUsEmail = async (email, message) => {\n    setAuthToken(process.env.SENDGRID_API_KEY);\n    var emailBody = `${email} wrote: \\n\\n${message}`;\n    const jsonPayload = {\n      from_email: fromEmail,\n      to_email: fromEmail,\n      body: emailBody\n    };\n\n    try {\n      const res = await axios.post(`${process.env.NEXT_PUBLIC_API_PROXY}/email/send/contact`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: EMAIL_SEND_SUCCESS,\n        payload: res.data\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_MESSAGE\n      }), 5000);\n    } catch (error) {\n      dispatch({\n        type: EMAIL_SEND_FAILURE,\n        payload: res.data\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_MESSAGE\n      }), 5000);\n    }\n  }; // Complete the user's email verification process\n\n\n  const verifyEmail = async token => {\n    const utcTime = new Date().toJSON();\n\n    try {\n      const res = await axios.put(`${process.env.NEXT_PUBLIC_API_PROXY}/user/emailverification/${token}`, {\n        timestamp: utcTime\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: EMAIL_VERIFICATION_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: EMAIL_VERIFICATION_FAIL,\n        payload: err.response.data.detail\n      });\n    }\n  }; // Method for forgot password - email validation\n\n\n  const validateEmail = async email => {\n    try {\n      const res = await axios.get(`${process.env.NEXT_PUBLIC_API_PROXY}/user/validate_email/${email}`);\n      dispatch({\n        type: EMAIL_FOUND,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: EMAIL_NOT_FOUND,\n        payload: err.response.data.detail\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_ERROR\n      }), 5000);\n    }\n  }; // Method for forgot password - otp generation\n\n\n  const generateOtp = async (id, email) => {\n    const jsonPayload = {\n      id: id,\n      email: email\n    };\n\n    try {\n      await axios.put(`${process.env.NEXT_PUBLIC_API_PROXY}/user/otp_generation`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: OTP_GENERATED_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: OTP_GENERATED_FAILURE,\n        payload: err.response.data.detail\n      });\n    }\n  }; // Method for forgot password - otp generation\n\n\n  const validateOtp = async (id, otp) => {\n    const utcTime = new Date().toJSON();\n\n    try {\n      await axios.get(`${process.env.NEXT_PUBLIC_API_PROXY}/user/verify_otp/${id}?otp=${otp}&timestamp=${utcTime}`);\n      dispatch({\n        type: OTP_VALIDATED_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: OTP_VALIDATED_FAILURE,\n        payload: err.response.data.detail\n      });\n      setTimeout(() => dispatch({\n        type: CLEAR_ERROR\n      }), 5000);\n    }\n  }; // Method for forgot password - password update\n\n\n  const updatePassword = async (password, userId) => {\n    const jsonPayload = {\n      password: password\n    };\n\n    try {\n      await axios.put(`${process.env.NEXT_PUBLIC_API_PROXY}/user/password/${userId}`, jsonPayload, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch({\n        type: PASSWORD_CHANGE_SUCCESS\n      });\n    } catch (err) {\n      dispatch({\n        type: PASSWORD_CHANGE_FAILURE,\n        payload: err.response.data.detail\n      });\n    }\n  };\n\n  const logout = () => {\n    dispatch({\n      type: LOGOUT\n    });\n  };\n\n  return __jsx(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      user: state.user,\n      loading: state.loading,\n      authError: state.authError,\n      emailVerified: state.emailVerified,\n      verificationStatus: state.verificationStatus,\n      emailSent: state.emailSent,\n      otpGenerated: state.otpGenerated,\n      otpValidated: state.otpValidated,\n      passwordChanged: state.passwordChanged,\n      genericMessage: state.genericMessage,\n      registerUser,\n      loginUser,\n      loadUser,\n      sendEmail,\n      sendOtpByEmail,\n      verifyEmail,\n      validateEmail,\n      updateEmailVerificationTimestamp,\n      sendContactUsEmail,\n      generateOtp,\n      validateOtp,\n      updatePassword,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["C:/nxt_door_deals/site/client/context/auth/AuthState.jsx"],"names":["React","useReducer","authReducer","AuthContext","setAuthToken","axios","Cookies","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED","AUTH_ERROR","CLEAR_ERROR","CLEAR_MESSAGE","LOGOUT","EMAIL_SEND_SUCCESS","EMAIL_SEND_FAILURE","EMAIL_VERIFICATION_SUCCESS","EMAIL_VERIFICATION_FAIL","EMAIL_FOUND","EMAIL_NOT_FOUND","OTP_GENERATED_SUCCESS","OTP_GENERATED_FAILURE","OTP_VALIDATED_SUCCESS","OTP_VALIDATED_FAILURE","PASSWORD_CHANGE_SUCCESS","PASSWORD_CHANGE_FAILURE","EMAIL_VERIFICATION_TIMESTAMP_UPDATED","cookie","currentYear","Date","getFullYear","fromEmail","process","env","NEXT_PUBLIC_FROM_EMAIL","AuthState","props","initialState","token","isAuthenticated","user","loading","authError","emailVerified","verificationStatus","emailSent","otpGenerated","otpValidated","passwordChanged","genericMessage","state","dispatch","registerUser","name","email","mobile","password","apartment","jsonPayload","apartment_id","res","post","NEXT_PUBLIC_API_PROXY","headers","type","payload","data","err","response","detail","setTimeout","loadUser","get","message","loginUser","formData","FormData","set","sendEmail","verificationUrl","SENDGRID_API_KEY","from_email","to_email","template_name","verificationurl","year","error","updateEmailVerificationTimestamp","id","put","sendOtpByEmail","sendContactUsEmail","emailBody","body","verifyEmail","utcTime","toJSON","timestamp","validateEmail","generateOtp","validateOtp","otp","updatePassword","userId","logout","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport authReducer from \"./authReducer\";\r\nimport AuthContext from \"./authContext\";\r\nimport setAuthToken from \"../../utils/setToken\";\r\nimport axios from \"axios\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  CLEAR_ERROR,\r\n  CLEAR_MESSAGE,\r\n  LOGOUT,\r\n  EMAIL_SEND_SUCCESS,\r\n  EMAIL_SEND_FAILURE,\r\n  EMAIL_VERIFICATION_SUCCESS,\r\n  EMAIL_VERIFICATION_FAIL,\r\n  EMAIL_FOUND,\r\n  EMAIL_NOT_FOUND,\r\n  OTP_GENERATED_SUCCESS,\r\n  OTP_GENERATED_FAILURE,\r\n  OTP_VALIDATED_SUCCESS,\r\n  OTP_VALIDATED_FAILURE,\r\n  PASSWORD_CHANGE_SUCCESS,\r\n  PASSWORD_CHANGE_FAILURE,\r\n  EMAIL_VERIFICATION_TIMESTAMP_UPDATED,\r\n} from \"../Types\";\r\n\r\nconst cookie = new Cookies();\r\n\r\n// Will be used in the copyright section in the email footer\r\nvar currentYear = new Date().getFullYear();\r\n\r\n// Email sender\r\nconst fromEmail = process.env.NEXT_PUBLIC_FROM_EMAIL;\r\n\r\nconst AuthState = (props) => {\r\n  const initialState = {\r\n    token: null,\r\n    isAuthenticated: null,\r\n    user: null,\r\n    loading: true,\r\n    authError: null,\r\n    emailVerified: null,\r\n    verificationStatus: null,\r\n    emailSent: null,\r\n    otpGenerated: null,\r\n    otpValidated: null,\r\n    passwordChanged: null,\r\n    genericMessage: null,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Register user\r\n  const registerUser = async (\r\n    name,\r\n    email,\r\n    mobile = null,\r\n    password,\r\n    apartment\r\n  ) => {\r\n    const jsonPayload = {\r\n      name: name,\r\n      email: email,\r\n      mobile: mobile,\r\n      password: password,\r\n      apartment_id: apartment,\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/register/user`,\r\n        jsonPayload,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      dispatch({ type: REGISTER_SUCCESS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: REGISTER_FAIL, payload: err.response.data.detail });\r\n      setTimeout(() => dispatch({ type: CLEAR_ERROR }), 5000);\r\n    }\r\n  };\r\n\r\n  // Load user\r\n  const loadUser = async () => {\r\n    if (cookie.get(\"nddToken\")) {\r\n      setAuthToken(cookie.get(\"nddToken\"));\r\n    }\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/auth/current_user`\r\n      );\r\n\r\n      dispatch({ type: USER_LOADED, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: AUTH_ERROR, payload: err.message });\r\n    }\r\n  };\r\n\r\n  // User login\r\n  const loginUser = async (email, password) => {\r\n    const formData = new FormData();\r\n\r\n    formData.set(\"username\", email);\r\n    formData.set(\"password\", password);\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/auth`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        }\r\n      );\r\n      dispatch({ type: LOGIN_SUCCESS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: LOGIN_FAIL, payload: err.response.data.detail });\r\n      setTimeout(() => dispatch({ type: CLEAR_ERROR }), 5000);\r\n    }\r\n  };\r\n\r\n  // Send email - user registration, welcome etc...\r\n  const sendEmail = async (name, email, verificationUrl) => {\r\n    setAuthToken(process.env.SENDGRID_API_KEY);\r\n\r\n    const jsonPayload = {\r\n      from_email: fromEmail,\r\n      to_email: email,\r\n      template_name: \"VERIFY_EMAIL_TEMPLATE\",\r\n      name: name,\r\n      verificationurl: verificationUrl,\r\n      year: currentYear,\r\n    };\r\n\r\n    try {\r\n      await axios.post(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/email/send`,\r\n        jsonPayload,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      dispatch({ type: EMAIL_SEND_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: EMAIL_SEND_FAILURE });\r\n    }\r\n  };\r\n\r\n  // Refresh the email verification timestamp\r\n  const updateEmailVerificationTimestamp = async (id) => {\r\n    const jsonPayload = { id: id };\r\n\r\n    try {\r\n      await axios.put(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/email_timestamp/refresh`,\r\n        jsonPayload,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      dispatch({ type: null });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: EMAIL_VERIFICATION_TIMESTAMP_UPDATED,\r\n        payload: err.response.data.detail,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Email the otp to the user during password change\r\n  const sendOtpByEmail = async (email) => {\r\n    setAuthToken(process.env.SENDGRID_API_KEY);\r\n\r\n    const jsonPayload = {\r\n      from_email: fromEmail,\r\n      to_email: email,\r\n      template_name: \"OTP_EMAIL_TEMPLATE\",\r\n      year: currentYear,\r\n    };\r\n\r\n    try {\r\n      await axios.post(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/email/send/otp`,\r\n        jsonPayload,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      dispatch({ type: EMAIL_SEND_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: EMAIL_SEND_FAILURE });\r\n    }\r\n  };\r\n\r\n  // Send the contact us email\r\n  const sendContactUsEmail = async (email, message) => {\r\n    setAuthToken(process.env.SENDGRID_API_KEY);\r\n\r\n    var emailBody = `${email} wrote: \\n\\n${message}`;\r\n\r\n    const jsonPayload = {\r\n      from_email: fromEmail,\r\n      to_email: fromEmail,\r\n      body: emailBody,\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/email/send/contact`,\r\n        jsonPayload,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      dispatch({ type: EMAIL_SEND_SUCCESS, payload: res.data });\r\n      setTimeout(() => dispatch({ type: CLEAR_MESSAGE }), 5000);\r\n    } catch (error) {\r\n      dispatch({ type: EMAIL_SEND_FAILURE, payload: res.data });\r\n      setTimeout(() => dispatch({ type: CLEAR_MESSAGE }), 5000);\r\n    }\r\n  };\r\n\r\n  // Complete the user's email verification process\r\n  const verifyEmail = async (token) => {\r\n    const utcTime = new Date().toJSON();\r\n    try {\r\n      const res = await axios.put(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/user/emailverification/${token}`,\r\n        {\r\n          timestamp: utcTime,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      dispatch({ type: EMAIL_VERIFICATION_SUCCESS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: EMAIL_VERIFICATION_FAIL,\r\n        payload: err.response.data.detail,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Method for forgot password - email validation\r\n  const validateEmail = async (email) => {\r\n    try {\r\n      const res = await axios.get(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/user/validate_email/${email}`\r\n      );\r\n\r\n      dispatch({ type: EMAIL_FOUND, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: EMAIL_NOT_FOUND, payload: err.response.data.detail });\r\n      setTimeout(() => dispatch({ type: CLEAR_ERROR }), 5000);\r\n    }\r\n  };\r\n\r\n  // Method for forgot password - otp generation\r\n  const generateOtp = async (id, email) => {\r\n    const jsonPayload = {\r\n      id: id,\r\n      email: email,\r\n    };\r\n\r\n    try {\r\n      await axios.put(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/user/otp_generation`,\r\n        jsonPayload,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      dispatch({ type: OTP_GENERATED_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: OTP_GENERATED_FAILURE,\r\n        payload: err.response.data.detail,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Method for forgot password - otp generation\r\n  const validateOtp = async (id, otp) => {\r\n    const utcTime = new Date().toJSON();\r\n    try {\r\n      await axios.get(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/user/verify_otp/${id}?otp=${otp}&timestamp=${utcTime}`\r\n      );\r\n\r\n      dispatch({ type: OTP_VALIDATED_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: OTP_VALIDATED_FAILURE,\r\n        payload: err.response.data.detail,\r\n      });\r\n      setTimeout(() => dispatch({ type: CLEAR_ERROR }), 5000);\r\n    }\r\n  };\r\n\r\n  // Method for forgot password - password update\r\n  const updatePassword = async (password, userId) => {\r\n    const jsonPayload = {\r\n      password: password,\r\n    };\r\n\r\n    try {\r\n      await axios.put(\r\n        `${process.env.NEXT_PUBLIC_API_PROXY}/user/password/${userId}`,\r\n        jsonPayload,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      dispatch({ type: PASSWORD_CHANGE_SUCCESS });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PASSWORD_CHANGE_FAILURE,\r\n        payload: err.response.data.detail,\r\n      });\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    dispatch({ type: LOGOUT });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        token: state.token,\r\n        isAuthenticated: state.isAuthenticated,\r\n        user: state.user,\r\n        loading: state.loading,\r\n        authError: state.authError,\r\n        emailVerified: state.emailVerified,\r\n        verificationStatus: state.verificationStatus,\r\n        emailSent: state.emailSent,\r\n        otpGenerated: state.otpGenerated,\r\n        otpValidated: state.otpValidated,\r\n        passwordChanged: state.passwordChanged,\r\n        genericMessage: state.genericMessage,\r\n        registerUser,\r\n        loginUser,\r\n        loadUser,\r\n        sendEmail,\r\n        sendOtpByEmail,\r\n        verifyEmail,\r\n        validateEmail,\r\n        updateEmailVerificationTimestamp,\r\n        sendContactUsEmail,\r\n        generateOtp,\r\n        validateOtp,\r\n        updatePassword,\r\n        logout,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthState;\r\n"]},"metadata":{},"sourceType":"module"}